import path from 'path'
import { readFile, writeFile } from 'fs/promises'
import { ensureDirectoryExistence } from './util'
import { format } from '@prisma/prisma-fmt-wasm'
import { pathToFileURL } from 'url'

export const merge = async (schemaPaths: string[], outputPath: string, dry: boolean) => {
  const headerContent = [
    '//',
    `// Autogenerated by \`prisma-import\``,
    '// Any modifications will be overwritten on subsequent runs.',
    '//',
    '',
  ]

  const outputContent: string[] = []
  const datasoureContent: string[] = []

  for (const schemaPath of schemaPaths) {
    let content = await readFile(schemaPath, 'utf-8')
    content = content
      .split('\n')
      .filter((line) => !/^(?<=\s*)(import\s*{.*)/g.test(line))
      .join('\n')

    const pushedContent: string[] = []

    pushedContent.push('\n')
    pushedContent.push('//')
    pushedContent.push(`// ${path.basename(schemaPath)}`)
    pushedContent.push('//')
    pushedContent.push('\n')
    pushedContent.push(content)

    if (/^\s*generator.*/g.test(content) || /^\s*datasource.*/g.test(content)) {
      datasoureContent.push(...pushedContent)
    } else {
      outputContent.push(...pushedContent)
    }
  }

  const resultingSchema = format(
    [...headerContent, ...datasoureContent, ...outputContent].join('\n'),
    JSON.stringify({
      textDocument: {
        uri: pathToFileURL(outputPath),
      },
      options: {
        tabSize: 2,
        insertSpaces: true,
      },
    }),
  )

  if (dry) {
    console.log(resultingSchema)
  } else {
    await ensureDirectoryExistence(outputPath)
    await writeFile(outputPath, resultingSchema)
  }
}
