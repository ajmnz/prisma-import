//
// Autogenerated by `prisma-import` at 12/17/2022, 1:52:54 AM.
// Any modifications will be overwritten on subsequent runs.
//

//
// index.prisma
//

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
  output          = "./generated"
}

generator enum {
  provider = "node ../../node_modules/prisma-enum-generator"
  output   = "./"
}

//
// admin.prisma
//

model Employee {
  id              Int            @id @default(autoincrement())
  role            Role           @relation(fields: [roleId], references: [id])
  roleId          Int
  firstName       String
  lastName        String
  email           String         @unique
  password        String
  lastPasswordGen DateTime
  lastConnection  DateTime
  orderHistory    OrderHistory[]

  @@index([email, password])
  @@index([id, password])
  @@index([roleId])
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String
  employees Employee[]
  Foo       Foo[]
}

model Foo {
  id        Int     @id @default(autoincrement())
  role      Role    @relation(fields: [roleId], references: [id])
  roleId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

//
// application.prisma
//

model Application {
  id             Int      @id @default(autoincrement())
  name           String
  description    String?
  username       String   @unique
  password       String
  lastActivityAt DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

//
// carrier.prisma
//

model Carrier {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(64)
  url          String?
  position     Int            @default(0)
  zone         Zone           @relation(fields: [zoneId], references: [id])
  zoneId       Int
  country      Country?       @relation(fields: [countryId], references: [id])
  countryId    Int?
  active       Boolean        @default(true)
  deleted      Boolean        @default(true)
  carts        Cart[]
  lang         CarrierLang[]
  orders       Order[]
  orderCarrier OrderCarrier[]
  rangePrices  RangePrice[]

  @@index([deleted, active])
}

model CarrierLang {
  carrier   Carrier @relation(fields: [carrierId], references: [id])
  carrierId Int
  lang      Lang    @relation(fields: [langId], references: [id])
  langId    Int
  delay     String?

  @@id([carrierId, langId])
  @@index([carrierId])
}

model RangePrice {
  id         Int     @id @default(autoincrement())
  carrier    Carrier @relation(fields: [carrierId], references: [id])
  carrierId  Int
  delimiter1 Decimal @db.Decimal(20, 6)
  delimiter2 Decimal @db.Decimal(20, 6)
  price      Decimal @db.Decimal(20, 6)

  @@unique([carrierId, delimiter1, delimiter2])
}

//
// cart.prisma
//

model Cart {
  id                Int            @id @default(autoincrement())
  carrier           Carrier?       @relation(fields: [carrierId], references: [id])
  carrierId         Int?
  addressDelivery   Address?       @relation("AddressDeliveryCart", fields: [addressDeliveryId], references: [id])
  addressDeliveryId Int?
  addressInvoice    Address?       @relation("AddressInvoiceCart", fields: [addressInvoiceId], references: [id])
  addressInvoiceId  Int?
  currency          Currency       @relation(fields: [currencyId], references: [id])
  currencyId        Int
  country           Country        @relation(fields: [countryId], references: [id])
  countryId         Int            @default(6)
  lang              Lang           @relation(fields: [langId], references: [id])
  langId            Int            @default(1)
  customer          Customer?      @relation(fields: [customerId], references: [id])
  customerId        Int?
  guest             Guest?         @relation(fields: [guestId], references: [id])
  guestId           String?
  secureKey         String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  rules             CartRule[]
  products          CartProduct[]
  specificPrices    SpecificPrice?
  order             Order?
  paypalOrder       OrderPayPal?
  gifts             ProductGift[]

  @@index([customerId])
  @@index([addressDeliveryId])
  @@index([addressInvoiceId])
  @@index([carrierId])
  @@index([currencyId])
  @@index([countryId])
}

model CartRule {
  id                     Int               @id @default(autoincrement())
  customer               Customer?         @relation(fields: [customerId], references: [id])
  customerId             Int?
  validFrom              DateTime // Rule is valid from
  validTo                DateTime // Rule is valid to
  description            String? // Internal
  quantity               Int? // Total available quantity
  quantityPerUser        Int? // Total uses allowed by customer
  code                   String // Discount code
  product                Product?          @relation(fields: [productId], references: [id]) // Restrict to specific product
  productId              Int?
  productMinimumQuantity Int? // If restricted, the minimum quantity needed to apply the discount
  freeShipping           Boolean // Includes free shipping
  reductionPercent       Decimal?          @db.Decimal(5, 2)
  reductionAmount        Decimal?          @db.Decimal(20, 6)
  reductionTax           Boolean // If the reduction specified includes tax or not (only amt.)
  minimumAmount          Decimal?          @db.Decimal(20, 6) // Minimum amount required for the rule to be applied
  maximumAmount          Decimal?          @db.Decimal(20, 6) // The maximum amount allowed for the rule to apply
  limitAmountsCurrency   Currency?         @relation(fields: [limitAmountsCurrencyId], references: [id])
  limitAmountsCurrencyId Int?
  limitAmountsTax        Boolean? // If the minimum/maximum amounts are with tax
  cartRuleRestriction    Boolean // If it cannot be combined with other rules
  country                Country?          @relation(fields: [countryId], references: [id]) // Country restriction
  countryId              Int?
  active                 Boolean
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  promotion              ProductPromotion? @relation(fields: [promotionId], references: [id])
  promotionId            Int?
  carts                  Cart[]
  lang                   CartRuleLang[]
  orderCartRules         OrderCartRule[]

  @@index([validFrom])
  @@index([validTo])
  @@index([code])
  @@index([customerId, active, validTo])
}

model CartRuleLang {
  cartRule   CartRule @relation(fields: [cartRuleId], references: [id])
  cartRuleId Int
  lang       Lang     @relation(fields: [langId], references: [id])
  langId     Int
  name       String

  @@id([cartRuleId, langId])
}

model ProductPromotion {
  id                     Int                       @id @default(autoincrement())
  name                   String
  description            String?
  products               Product[]
  categories             Category[]
  manufacturers          Manufacturer[]
  priority               Int                       @default(1)
  startsAt               DateTime
  endsAt                 DateTime
  codePattern            String
  quantity               Int?
  quantityPerUser        Int?
  minimumAmount          Decimal?                  @db.Decimal(20, 6)
  maximumAmount          Decimal?                  @db.Decimal(20, 6)
  limitAmountsCurrency   Currency?                 @relation(fields: [limitAmountsCurrencyId], references: [id])
  limitAmountsCurrencyId Int?
  limitAmountsTax        Boolean?
  reductionPercent       Decimal?                  @db.Decimal(5, 2)
  reductionAmount        Decimal?                  @db.Decimal(20, 6)
  reductionTax           Boolean
  reductionDisplay       PromotionReductionDisplay
  cartRules              CartRule[]
  linkRewrite            String?
  enablePublicPage       Boolean                   @default(false)
  active                 Boolean                   @default(true)
  deleted                Boolean                   @default(false)
}

enum PromotionReductionDisplay {
  amount
  percent
}

model CartProduct {
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  createdAt DateTime @default(now())

  @@id([cartId, productId])
  @@index([cartId, createdAt, productId])
}

//
// catalog.prisma
//

model CatalogRewrites {
  id             Int           @id @default(autoincrement())
  old            String
  new            String?
  permanent      Boolean       @default(true)
  lang           Lang          @relation(fields: [langId], references: [id])
  langId         Int
  product        Product?      @relation(fields: [productId], references: [id])
  productId      Int?
  category       Category?     @relation(fields: [categoryId], references: [id])
  categoryId     Int?
  manufacturer   Manufacturer? @relation(fields: [manufacturerId], references: [id])
  manufacturerId Int?
  hits           Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@unique([old, langId])
}

//
// category.prisma
//

model Category {
  id                      Int                @id @default(autoincrement())
  pimId                   String             @unique
  parentId                Int?
  parent                  Category?          @relation("ParentCategory", fields: [parentId], references: [id])
  children                Category[]         @relation("ParentCategory")
  depth                   Int
  position                Int?
  active                  Boolean            @default(true)
  coverUri                String?
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  products                Product[]
  defaultCategoryProducts Product[]          @relation("DefaultCategory")
  lang                    CategoryLang[]
  menuItem                MenuItem[]
  rewrites                CatalogRewrites[]
  promotions              ProductPromotion[]

  @@unique([active, id])
  @@index([parentId])
  @@index([depth])
}

model CategoryLang {
  category          Category @relation(fields: [categoryId], references: [id])
  categoryId        Int
  lang              Lang     @relation(fields: [langId], references: [id])
  langId            Int
  name              String
  linkRewrite       String
  description       String?
  secondDescription String?
  metaTitle         String?
  metaKeywords      String?
  metaDescription   String?

  @@id([categoryId, langId])
  @@index([name])
}

//
// manufacturer.prisma
//

model Manufacturer {
  id          Int                @id @default(autoincrement())
  pimId       String             @unique
  name        String
  linkRewrite String
  active      Boolean            @default(false)
  logoUri     String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  products    Product[]
  lang        ManufacturerLang[]
  rewrites    CatalogRewrites[]
  promotions  ProductPromotion[]
}

model ManufacturerLang {
  manufacturer     Manufacturer @relation(fields: [manufacturerId], references: [id])
  manufacturerId   Int
  lang             Lang         @relation(fields: [langId], references: [id])
  langId           Int
  description      String?
  shortDescription String?
  metaTitle        String?
  metaKeywords     String?
  metaDescription  String?

  @@id([manufacturerId, langId])
}

//
// product.prisma
//

model Product {
  id                  Int                   @id @default(autoincrement())
  sku                 String                @unique
  manufacturer        Manufacturer?         @relation(fields: [manufacturerId], references: [id])
  manufacturerId      Int?
  defaultCategory     Category              @relation(name: "DefaultCategory", fields: [defaultCategoryId], references: [id])
  defaultCategoryId   Int
  categories          Category[]
  ean13               String?
  minimumQuantity     Int                   @default(1)
  price               Decimal               @default(0.000000) @db.Decimal(20, 6)
  handling            ProductHandling?
  reference           String
  width               Decimal               @default(0.000000) @db.Decimal(20, 6)
  height              Decimal               @default(0.000000) @db.Decimal(20, 6)
  depth               Decimal               @default(0.000000) @db.Decimal(20, 6)
  weight              Decimal               @default(0.000000) @db.Decimal(20, 6)
  active              Boolean               @default(false)
  restockDate         DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  attachments         Attachment[]
  images              Image[]
  carts               CartProduct[]
  lang                ProductLang[]
  specificPrice       SpecificPrice?
  featureProduct      FeatureProduct[]
  orderDetail         OrderDetail[]
  productSale         ProductSale?
  stock               ProductStock?
  externalOrderDetail ExternalOrderDetail[]
  reviews             ProductReview[]
  promotions          ProductPromotion[]
  rewrites            CatalogRewrites[]
  cartRules           CartRule[]
  gift                ProductGift?
  Foo                 Foo[]

  @@index([createdAt])
  @@index([defaultCategoryId])
  @@index([manufacturerId])
}

model ProductLang {
  product          Product @relation(fields: [productId], references: [id])
  productId        Int
  lang             Lang    @relation(fields: [langId], references: [id])
  langId           Int
  name             String
  linkRewrite      String
  description      String? @db.Text
  descriptionShort String?
  metaDescription  String?
  metaKeywords     String?
  metaTitle        String?

  @@id([productId, langId])
  @@index([langId])
  @@index([name])
}

model ProductGift {
  id        Int               @id @default(autoincrement())
  sku       String?
  imageUri  String?
  product   Product?          @relation(fields: [productId], references: [id])
  productId Int?              @unique
  quantity  Int?
  validFrom DateTime?
  validTo   DateTime?
  active    Boolean           @default(true)
  lang      ProductGiftLang[]
  carts     Cart[]
  orders    Order[]
}

model ProductGiftLang {
  productGift   ProductGift @relation(fields: [productGiftId], references: [id])
  productGiftId Int
  lang          Lang        @relation(fields: [langId], references: [id])
  langId        Int
  name          String
  description   String?

  @@id([productGiftId, langId])
}

model ProductStock {
  id        Int                    @id @default(autoincrement())
  product   Product                @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int                    @default(0)
  inStock   Boolean                @default(false)
  movements ProductStockMovement[]

  @@unique([productId])
  @@index([productId])
}

/// Change in stocks records
model ProductStockMovement {
  id             Int          @id @default(autoincrement())
  productStock   ProductStock @relation(fields: [productStockId], references: [id])
  productStockId Int
  author         String
  fromQuantity   Int?
  toQuantity     Int?
}

model ProductSale {
  product      Product  @relation(fields: [productId], references: [id])
  productId    Int      @id
  quantitySold Int      @default(0)
  timesSold    Int      @default(0)
  updatedAt    DateTime @updatedAt
}

/// Extra price that a product can have
model ProductHandling {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int     @unique
  lang      Lang    @relation(fields: [langId], references: [id])
  langId    Int
  price     Decimal @default(0.000000) @db.Decimal(20, 6)
}

/// Product pricing
model SpecificPrice {
  id            Int                         @id @default(autoincrement())
  cart          Cart?                       @relation(fields: [cartId], references: [id])
  cartId        Int?                        @unique
  product       Product                     @relation(fields: [productId], references: [id])
  productId     Int                         @unique
  customer      Customer?                   @relation(fields: [customerId], references: [id])
  customerId    Int?
  fromQuantity  Int                         @default(1)
  reduction     Decimal                     @db.Decimal(20, 6)
  reductionTax  Boolean                     @default(true)
  reductionType SpecificPrice_reductionType
  pimPrice      Decimal                     @default(0) @db.Decimal(20, 6)
  dateFrom      DateTime?
  dateTo        DateTime?

  @@unique([productId, customerId, cartId, fromQuantity, dateTo, dateFrom])
  @@index([productId, customerId, fromQuantity, dateFrom, dateTo])
  @@index([fromQuantity])
  @@index([customerId])
  @@index([productId])
  @@index([cartId])
  @@index([dateFrom])
  @@index([dateTo])
}

enum SpecificPrice_reductionType {
  amount
  percentage
}

model Attachment {
  id          Int       @id @default(autoincrement())
  uri         String
  fileName    String
  fileSize    BigInt    @default(0)
  displayName String?
  mime        String    @default("application/pdf")
  products    Product[]
  lang        Lang      @relation(fields: [langId], references: [id])
  langId      Int
}

model Feature {
  id              Int                @id @default(autoincrement())
  position        Int                @default(0)
  values          FeatureValue[]
  featureProducts FeatureProduct[]
  lang            FeatureLang[]
  valuesLang      FeatureValueLang[]
}

model FeatureLang {
  feature   Feature @relation(fields: [featureId], references: [id])
  featureId Int
  lang      Lang    @relation(fields: [langId], references: [id])
  langId    Int
  name      String
  key       String

  @@id([featureId, langId])
  @@unique([langId, key])
  @@index([langId, name])
}

model FeatureProduct {
  feature        Feature      @relation(fields: [featureId], references: [id])
  featureId      Int
  product        Product      @relation(fields: [productId], references: [id])
  productId      Int
  featureValue   FeatureValue @relation(fields: [featureValueId], references: [id])
  featureValueId Int

  @@id([featureId, productId, featureValueId])
  @@index([featureValueId])
  @@index([productId])
}

model FeatureValue {
  id              Int                @id @default(autoincrement())
  feature         Feature            @relation(fields: [featureId], references: [id])
  featureId       Int
  custom          Boolean            @default(false)
  featureProducts FeatureProduct[]
  lang            FeatureValueLang[]

  @@index([featureId])
}

model FeatureValueLang {
  feature        Feature      @relation(fields: [featureId], references: [id])
  featureId      Int
  featureValue   FeatureValue @relation(fields: [featureValueId], references: [id])
  featureValueId Int
  lang           Lang         @relation(fields: [langId], references: [id])
  langId         Int
  value          String
  key            String

  @@id([featureValueId, langId])
  @@unique([featureId, key, langId])
}

model Image {
  id        Int         @id @default(autoincrement())
  uri       String
  product   Product     @relation(fields: [productId], references: [id])
  productId Int
  position  Int         @default(0) @db.SmallInt
  cover     Boolean     @default(true)
  lang      ImageLang[]

  @@index([productId])
}

model ImageLang {
  image   Image   @relation(fields: [imageId], references: [id])
  imageId Int
  lang    Lang    @relation(fields: [langId], references: [id])
  langId  Int
  alt     String?

  @@id([imageId, langId])
  @@index([imageId])
}

//
// customer.prisma
//

model Customer {
  id                    Int             @id @default(autoincrement())
  gender                Gender          @relation(fields: [genderId], references: [id])
  genderId              Int             @default(1)
  lang                  Lang            @relation(fields: [langId], references: [id])
  langId                Int             @default(1)
  firstName             String
  lastName              String
  email                 String          @unique
  password              String?
  lastPasswordGen       DateTime?
  isGoogleOAuth         Boolean         @default(false)
  isFacebookOAuth       Boolean         @default(false)
  newsletter            Boolean         @default(true)
  resetPasswordToken    String?
  resetPasswordValidity DateTime?
  secureKey             String          @default(uuid())
  lastConnection        DateTime        @default(now())
  active                Boolean         @default(true)
  deleted               Boolean         @default(false)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  carts                 Cart[]
  addresses             Address[]
  cartRules             CartRule[]
  specificPrices        SpecificPrice[]
  orders                Order[]
  orderReturn           OrderReturn[]
  orderSlip             OrderSlip[]
  tokens                Token[]
  guests                Guest[]
  reviewer              Reviewer[]

  @@index([email])
  @@index([email, password])
  @@index([id, password])
}

model Gender {
  id        Int          @id @default(autoincrement())
  customers Customer[]
  lang      GenderLang[]
}

model GenderLang {
  gender   Gender @relation(fields: [genderId], references: [id])
  genderId Int
  lang     Lang   @relation(fields: [langId], references: [id])
  langId   Int
  name     String

  @@id([genderId, langId])
  @@index([genderId])
}

model Token {
  id            Int       @id @default(autoincrement())
  value         String    @unique
  customer      Customer  @relation(fields: [customerId], references: [id])
  customerId    Int
  createdByIp   String?
  createdAt     DateTime  @default(now())
  expires       DateTime
  originTokenId Int?
  originToken   Token?    @relation("TokenToToken", fields: [originTokenId], references: [id])
  replaced      Boolean   @default(false)
  replacedAt    DateTime?
  Token         Token[]   @relation("TokenToToken")
}

model Guest {
  id         String    @id @default(uuid())
  ipAddress  String?
  createdAt  DateTime  @default(now())
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId Int?
  carts      Cart[]
}

model Address {
  id                    Int      @id @default(autoincrement())
  country               Country  @relation(fields: [countryId], references: [id])
  countryId             Int
  state                 State?   @relation(fields: [stateId], references: [id])
  stateId               Int?
  customer              Customer @relation(fields: [customerId], references: [id])
  customerId            Int
  company               String?  @db.VarChar(255)
  firstName             String   @db.VarChar(255)
  lastName              String   @db.VarChar(255)
  address1              String   @db.VarChar(128)
  address2              String?  @db.VarChar(128)
  postcode              String
  city                  String   @db.VarChar(64)
  phone                 String
  dniNif                String?  @db.VarChar(16)
  active                Boolean  @default(true)
  deleted               Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  addressDeliveryCarts  Cart[]   @relation("AddressDeliveryCart")
  addressInvoiceCarts   Cart[]   @relation("AddressInvoiceCart")
  addressDeliveryOrders Order[]  @relation("AddressDeliveryOrder")
  addressInvoiceOrders  Order[]  @relation("AddressInvoiceOrder")

  @@index([customerId])
  @@index([countryId])
  @@index([stateId])
}

model AddressFormat {
  country   Country @relation(fields: [countryId], references: [id])
  countryId Int     @id
  format    String
}

model Mail {
  id        Int      @id @default(autoincrement())
  recipient String
  template  String
  subject   String
  lang      Lang     @relation(fields: [langId], references: [id])
  langId    Int
  createdAt DateTime @default(now())
}

//
// geo.prisma
//

model Country {
  id            Int             @id @default(autoincrement())
  zone          Zone            @relation(fields: [zoneId], references: [id])
  zoneId        Int
  currency      Currency        @relation(fields: [currencyId], references: [id])
  currencyId    Int             @default(1)
  isoCode       String          @unique
  callPrefix    Int
  active        Boolean
  hasStates     Boolean         @default(false)
  needsIdNumber Boolean         @default(false)
  needsZipCode  Boolean         @default(true)
  zipCodeFormat String?
  states        State[]
  addresses     Address[]
  lang          CountryLang[]
  addressFormat AddressFormat[]
  taxRules      TaxRule[]
  carriers      Carrier[]
  countryGroups CountryGroup[]
  cart          Cart[]
  CartRule      CartRule[]

  @@index([zoneId])
  @@index([isoCode])
}

model CountryLang {
  country   Country @relation(fields: [countryId], references: [id])
  countryId Int
  lang      Lang    @relation(fields: [langId], references: [id])
  langId    Int
  name      String

  @@id([countryId, langId])
  @@unique([countryId, langId])
}

// The shop can consider that some countries are equal and thus
// can have share properties, models, etc.
//
// For example, if France and Spain are on the same group, a cart created
// when visiting the site on Spain will still be valid if the location is
// switched to French

model CountryGroup {
  id        Int       @id @default(autoincrement())
  name      String
  countries Country[]
}

model Tax {
  id      Int       @id @default(autoincrement())
  rate    Decimal   @db.Decimal(10, 3)
  active  Boolean   @default(true)
  deleted Boolean   @default(false)
  lang    TaxLang[]
  taxRule TaxRule[]
}

model TaxLang {
  tax    Tax    @relation(fields: [taxId], references: [id])
  taxId  Int
  lang   Lang   @relation(fields: [langId], references: [id])
  langId Int
  name   String

  @@id([taxId, langId])
}

// Specifies tax rules for each country/state
model TaxRule {
  id        Int     @id @default(autoincrement())
  country   Country @relation(fields: [countryId], references: [id])
  countryId Int
  state     State?  @relation(fields: [stateId], references: [id])
  stateId   Int?    @unique
  tax       Tax     @relation(fields: [taxId], references: [id])
  taxId     Int

  @@index([countryId, stateId], name: "category_getproducts")
  @@index([taxId], name: "taxId")
}

model State {
  id        Int       @id @default(autoincrement())
  countryId Int
  country   Country   @relation(fields: [countryId], references: [id])
  name      String
  isoCode   String
  active    Boolean   @default(false)
  addresses Address[]
  taxRule   TaxRule?

  @@index([countryId])
  @@index([name])
}

model Zone {
  id        Int       @id @default(autoincrement())
  name      String
  active    Boolean   @default(false)
  countries Country[]
  carriers  Carrier[]
}

model Currency {
  id             Int                @id @default(autoincrement())
  name           String
  symbol         String
  isoCode        String
  numericIsoCode String
  precision      Int
  conversionRate Decimal            @db.Decimal(13, 6)
  active         Boolean
  deleted        Boolean            @default(false)
  countries      Country[]
  carts          Cart[]
  orders         Order[]
  orderPayment   OrderPayment[]
  externalOrder  ExternalOrder[]
  CartRule       CartRule[]
  promotions     ProductPromotion[]

  @@index([isoCode])
}

model Lang {
  id                    Int                     @id @default(autoincrement())
  name                  String
  pimLocale             String                  @unique
  active                Boolean
  isoCode               String
  languageCode          String
  locale                String
  dateFormatLite        String
  dateFormatFull        String
  isRTL                 Boolean
  domain                String
  GenderLang            GenderLang[]
  CarrierLang           CarrierLang[]
  CountryLang           CountryLang[]
  CartRuleLang          CartRuleLang[]
  Customer              Customer[]
  ProductLang           ProductLang[]
  CategoryLang          CategoryLang[]
  ManufacturerLang      ManufacturerLang[]
  FeatureValueLang      FeatureValueLang[]
  FeatureLang           FeatureLang[]
  Mail                  Mail[]
  Order                 Order[]
  OrderStatusLang       OrderStatusLang[]
  ImageLang             ImageLang[]
  OrderReturnStatusLang OrderReturnStatusLang[]
  TaxLang               TaxLang[]
  MenuItemLang          MenuItemLang[]
  Cart                  Cart[]
  Attachment            Attachment[]
  ProductHandling       ProductHandling[]
  ProductReview         ProductReview[]
  CatalogRewrites       CatalogRewrites[]
  ServiceReview         ServiceReview[]
  ProductGiftLang       ProductGiftLang[]
}

//
// external-order.prisma
//

model ExternalOrder {
  id                   Int                    @id @default(autoincrement())
  reference            String                 @unique
  externalCustomer     ExternalCustomer       @relation(fields: [externalCustomerId], references: [id])
  externalCustomerId   Int
  status               ExternalOrderStatus
  currency             String
  originalCurrency     Currency?              @relation(fields: [originalCurrencyId], references: [id])
  originalCurrencyId   Int?
  totalPaidTaxIncl     Decimal                @db.Decimal(20, 6)
  totalPaidTaxExcl     Decimal                @db.Decimal(20, 6)
  totalDiscounts       Decimal                @db.Decimal(20, 6)
  totalProductsTaxIncl Decimal                @db.Decimal(20, 6)
  totalProductsTaxExcl Decimal                @db.Decimal(20, 6)
  totalShippingTaxIncl Decimal                @db.Decimal(20, 6)
  totalShippingTaxExcl Decimal                @db.Decimal(20, 6)
  addressDelivery      ExternalAddress?       @relation("AddressDeliveryExternalOrder", fields: [addressDeliveryId], references: [id])
  addressDeliveryId    Int?
  addressInvoice       ExternalAddress?       @relation("AddressInvoiceExternalOrder", fields: [addressInvoiceId], references: [id])
  addressInvoiceId     Int?
  provider             ExternalOrderProvider  @relation(fields: [providerId], references: [id])
  providerId           Int
  createdAt            DateTime
  updatedAt            DateTime
  orderDetail          ExternalOrderDetail[]
  invoice              ExternalOrderInvoice?
  shipment             ExternalOrderShipment?
}

model ExternalOrderDetail {
  id                Int           @id @default(autoincrement())
  externalOrder     ExternalOrder @relation(fields: [externalOrderId], references: [id])
  externalOrderId   Int
  originalProduct   Product?      @relation(fields: [originalProductId], references: [id])
  originalProductId Int?
  productName       String
  productSku        String
  productQuantity   Int
  unitPriceTaxIncl  Decimal       @db.Decimal(20, 6)
  unitPriceTaxExcl  Decimal       @db.Decimal(20, 6)
  totalPriceTaxIncl Decimal       @db.Decimal(20, 6)
  totalPriceTaxExcl Decimal       @db.Decimal(20, 6)
  carrierName       String
  taxRate           Decimal       @db.Decimal(20, 6)
  shippingTaxRate   Decimal       @db.Decimal(20, 6)
}

model ExternalOrderShipment {
  id                Int           @id @default(autoincrement())
  order             ExternalOrder @relation(fields: [orderId], references: [id])
  orderId           Int           @unique
  sendcloudParcelId Int?
  shippyProOrderId  String?
  trackingNumber    String?
  trackingUrl       String?
  carrierName       String?
  announcedAt       DateTime?
  createdAt         DateTime?
  updatedAt         DateTime?
}

model ExternalCustomer {
  id           Int               @id @default(autoincrement())
  firstName    String
  lastName     String
  fiscalNumber String?
  vatNumber    String? // Intracommunity VAT number
  orders       ExternalOrder[]
  addresses    ExternalAddress[]
}

model ExternalAddress {
  id                    Int              @id @default(autoincrement())
  externalCustomer      ExternalCustomer @relation(fields: [externalCustomerId], references: [id])
  externalCustomerId    Int
  firstName             String
  lastName              String
  company               String?
  address1              String
  address2              String?
  address3              String?
  postcode              String
  city                  String
  country               String
  countryIso            String
  phone                 String
  email                 String?
  isProfessional        Boolean?
  addressDeliveryOrders ExternalOrder[]  @relation("AddressDeliveryExternalOrder")
  addressInvoiceOrders  ExternalOrder[]  @relation("AddressInvoiceExternalOrder")
}

model ExternalOrderControl {
  id         String                     @id @default(uuid())
  provider   ExternalOrderProvider      @relation(fields: [providerId], references: [id])
  providerId Int
  status     ExternalOrderControlStatus
  meta       String?                    @db.Text
  startedAt  DateTime
  finishedAt DateTime?
}

enum ExternalOrderControlStatus {
  running
  completed
  failed
}

model ExternalOrderProvider {
  id       Int                    @id @default(autoincrement())
  name     String
  image    String
  orders   ExternalOrder[]
  controls ExternalOrderControl[]
}

enum ExternalOrderStatus {
  pending
  preparing
  shipped
  rejected
  refunding
  refunded
}

model ExternalOrderInvoice {
  id                   Int           @id @default(autoincrement())
  order                ExternalOrder @relation(fields: [orderId], references: [id])
  orderId              Int           @unique
  number               Int
  totalDiscountTaxExcl Decimal       @default(0.000000) @db.Decimal(20, 6)
  totalDiscountTaxIncl Decimal       @default(0.000000) @db.Decimal(20, 6)
  totalPaidTaxExcl     Decimal       @default(0.000000) @db.Decimal(20, 6)
  totalPaidTaxIncl     Decimal       @default(0.000000) @db.Decimal(20, 6)
  totalProductsTaxExcl Decimal       @default(0.000000) @db.Decimal(20, 6)
  totalProductsTaxIncl Decimal       @default(0.000000) @db.Decimal(20, 6)
  totalShippingTaxExcl Decimal       @default(0.000000) @db.Decimal(20, 6)
  totalShippingTaxIncl Decimal       @default(0.000000) @db.Decimal(20, 6)
  createdAt            DateTime      @default(now())
}

//
// order.prisma
//

model Order {
  id                    Int         @id @default(autoincrement())
  reference             String      @unique @db.VarChar(9)
  carrier               Carrier?    @relation(fields: [carrierId], references: [id])
  carrierId             Int?
  lang                  Lang        @relation(fields: [langId], references: [id])
  langId                Int
  customer              Customer    @relation(fields: [customerId], references: [id])
  customerId            Int
  cart                  Cart        @relation(fields: [cartId], references: [id], map: "Order_cartId_fkey")
  cartId                Int         @unique
  secureKey             String?
  currency              Currency    @relation(fields: [currencyId], references: [id])
  currencyId            Int
  addressDelivery       Address?    @relation("AddressDeliveryOrder", fields: [addressDeliveryId], references: [id])
  addressDeliveryId     Int?
  addressInvoice        Address?    @relation("AddressInvoiceOrder", fields: [addressInvoiceId], references: [id])
  addressInvoiceId      Int?
  orderStatus           OrderStatus @relation(fields: [orderStatusId], references: [id])
  orderStatusId         Int
  payment               String      @db.VarChar(255)
  shippingNumber        String?     @db.VarChar(64)
  totalDiscounts        Decimal     @default(0.000000) @db.Decimal(20, 6)
  totalDiscountsTaxIncl Decimal     @default(0.000000) @db.Decimal(20, 6)
  totalDiscountsTaxExcl Decimal     @default(0.000000) @db.Decimal(20, 6)
  totalPaid             Decimal     @default(0.000000) @db.Decimal(20, 6)
  totalPaidTaxIncl      Decimal     @default(0.000000) @db.Decimal(20, 6)
  totalPaidTaxExcl      Decimal     @default(0.000000) @db.Decimal(20, 6)
  totalPaidReal         Decimal     @default(0.000000) @db.Decimal(20, 6)
  totalProducts         Decimal     @default(0.000000) @db.Decimal(20, 6)
  totalProductsTaxIncl  Decimal     @default(0.000000) @db.Decimal(20, 6)
  totalShipping         Decimal     @default(0.000000) @db.Decimal(20, 6)
  totalShippingTaxIncl  Decimal     @default(0.000000) @db.Decimal(20, 6)
  totalShippingTaxExcl  Decimal     @default(0.000000) @db.Decimal(20, 6)
  carrierTaxRate        Decimal     @default(0.000) @db.Decimal(10, 3)
  invoiceNumber         Int?
  deliveryNumber        Int?
  invoiceDate           DateTime?
  deliveryDate          DateTime?
  maximumDeliveryDate   DateTime?
  valid                 Boolean     @default(false) // Awaiting wire transfer
  hasSeenConfirmation   Boolean     @default(false)
  tpInviteRequested     Boolean     @default(false)
  warnings              String[]
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  orderCarrier        OrderCarrier[]
  orderInvoice        OrderInvoice[]
  orderCartRule       OrderCartRule[]
  orderDetail         OrderDetail[]
  orderInvoicePayment OrderInvoicePayment[]
  orderReturn         OrderReturn[]
  orderSlip           OrderSlip[]
  orderHistory        OrderHistory[]
  orderPayment        OrderPayment[]
  paypalOrder         OrderPayPal?
  productReviews      ProductReview[]
  ServiceReview       ServiceReview[]
  gifts               ProductGift[]

  @@index([orderStatusId])
  @@index([createdAt])
  @@index([addressDeliveryId])
  @@index([addressInvoiceId])
  @@index([carrierId])
  @@index([cartId])
  @@index([currencyId])
  @@index([customerId])
  @@index([langId])
  @@index([invoiceNumber])
  @@index([reference])
}

model OrderStatus {
  id           Int               @id @default(autoincrement())
  invoice      Boolean           @default(false)
  sendEmail    Boolean           @default(false)
  color        String?           @db.VarChar(32)
  unremovable  Boolean
  hidden       Boolean           @default(false)
  logable      Boolean           @default(false)
  delivery     Boolean           @default(false)
  shipped      Boolean           @default(false)
  paid         Boolean           @default(false)
  pdfInvoice   Boolean           @default(false)
  pdfDelivery  Boolean           @default(false)
  deleted      Boolean           @default(false)
  step         OrderStatusStep   @default(waiting)
  lang         OrderStatusLang[]
  orders       Order[]
  orderHistory OrderHistory[]
}

enum OrderStatusStep {
  error
  aborted
  waiting
  accepted
  preparing
  shipped
  delivered
}

model OrderStatusLang {
  orderStatus   OrderStatus         @relation(fields: [orderStatusId], references: [id])
  orderStatusId Int
  lang          Lang                @relation(fields: [langId], references: [id])
  langId        Int
  name          String              @db.VarChar(64)
  template      OrderEmailTemplate?

  @@id([orderStatusId, langId])
}

enum OrderEmailTemplate {
  cancelled
  bankwire
  paymentError
  refund
  payment
}

model OrderCarrier {
  id                  Int           @id @default(autoincrement())
  order               Order         @relation(fields: [orderId], references: [id])
  orderId             Int
  carrier             Carrier?      @relation(fields: [carrierId], references: [id])
  carrierId           Int?
  orderInvoice        OrderInvoice? @relation(fields: [orderInvoiceId], references: [id])
  orderInvoiceId      Int?
  weight              Decimal?      @db.Decimal(20, 6)
  shippingCostTaxExcl Decimal?      @db.Decimal(20, 6)
  shippingCostTaxIncl Decimal?      @db.Decimal(20, 6)
  trackingNumber      String?       @db.VarChar(250)
  trackingUrl         String?
  sendcloudParcelId   String?
  shippyProOrderId    String?
  createdAt           DateTime      @default(now())

  @@index([carrierId])
  @@index([orderId])
  @@index([orderInvoiceId])
}

model OrderInvoice {
  id                   Int                   @id @default(autoincrement())
  order                Order                 @relation(fields: [orderId], references: [id])
  orderId              Int
  number               Int                   @unique
  deliveryNumber       Int?
  deliveryDate         DateTime?
  totalDiscountTaxExcl Decimal               @default(0.000000) @db.Decimal(20, 6)
  totalDiscountTaxIncl Decimal               @default(0.000000) @db.Decimal(20, 6)
  totalPaidTaxExcl     Decimal               @default(0.000000) @db.Decimal(20, 6)
  totalPaidTaxIncl     Decimal               @default(0.000000) @db.Decimal(20, 6)
  totalProducts        Decimal               @default(0.000000) @db.Decimal(20, 6)
  totalProductsTaxIncl Decimal               @default(0.000000) @db.Decimal(20, 6)
  totalShippingTaxExcl Decimal               @default(0.000000) @db.Decimal(20, 6)
  totalShippingTaxIncl Decimal               @default(0.000000) @db.Decimal(20, 6)
  createdAt            DateTime              @default(now())
  orderCarrier         OrderCarrier[]
  orderCartRule        OrderCartRule[]
  orderDetail          OrderDetail[]
  orderInvoicePayment  OrderInvoicePayment[]
  orderInvoiceTax      OrderInvoiceTax[]

  @@index([orderId])
}

model OrderInvoicePayment {
  orderInvoice   OrderInvoice @relation(fields: [orderInvoiceId], references: [id])
  orderInvoiceId Int
  orderPayment   OrderPayment @relation(fields: [orderPaymentId], references: [id])
  orderPaymentId Int
  order          Order        @relation(fields: [orderId], references: [id])
  orderId        Int

  @@id([orderInvoiceId, orderPaymentId])
  @@index([orderId])
  @@index([orderPaymentId])
}

// Shipping tax only
model OrderInvoiceTax {
  orderInvoice   OrderInvoice @relation(fields: [orderInvoiceId], references: [id])
  orderInvoiceId Int
  type           String       @db.VarChar(15)
  amount         Decimal      @default(0.000000) @db.Decimal(10, 6)

  @@id([orderInvoiceId])
}

// Orders that used discounts
model OrderCartRule {
  id             Int           @id @default(autoincrement())
  order          Order         @relation(fields: [orderId], references: [id])
  orderId        Int
  cartRule       CartRule?     @relation(fields: [cartRuleId], references: [id])
  cartRuleId     Int?
  orderInvoice   OrderInvoice? @relation(fields: [orderInvoiceId], references: [id])
  orderInvoiceId Int?
  name           String        @db.VarChar(254)
  value          Decimal       @default(0.00) @db.Decimal(17, 2)
  valueTaxExcl   Decimal       @default(0.00) @db.Decimal(17, 2)
  freeShipping   Boolean       @default(false)

  @@index([cartRuleId])
  @@index([orderId])
}

model OrderDetail {
  id                      Int                 @id @default(autoincrement())
  order                   Order               @relation(fields: [orderId], references: [id])
  orderId                 Int
  orderInvoice            OrderInvoice?       @relation(fields: [orderInvoiceId], references: [id])
  orderInvoiceId          Int?
  product                 Product?            @relation(fields: [productId], references: [id])
  productId               Int?
  productName             String              @db.VarChar(255)
  productQuantity         Int                 @default(0)
  productQuantityInStock  Int                 @default(0)
  productQuantityRefunded Int                 @default(0)
  productQuantityReturn   Int                 @default(0)
  productPrice            Decimal             @default(0.000000) @db.Decimal(20, 6)
  reductionPercent        Decimal             @default(0.00) @db.Decimal(10, 2)
  productQuantityDiscount Decimal             @default(0.000000) @db.Decimal(20, 6)
  productEan13            String?
  productReference        String?
  productSku              String?
  productWeight           Decimal             @db.Decimal(20, 6)
  totalPriceTaxIncl       Decimal             @default(0.000000) @db.Decimal(20, 6)
  totalPriceTaxExcl       Decimal             @default(0.000000) @db.Decimal(20, 6)
  unitPriceTaxIncl        Decimal             @default(0.000000) @db.Decimal(20, 6)
  unitPriceTaxExcl        Decimal             @default(0.000000) @db.Decimal(20, 6)
  originalProductPrice    Decimal             @default(0.000000) @db.Decimal(20, 6)
  orderDetailTax          OrderDetailTax?
  orderReturnDetail       OrderReturnDetail[]
  orderSlipDetail         OrderSlipDetail[]

  @@index([orderId, id])
  @@index([orderId])
}

// tax per product and total (product tax * product quantity)
model OrderDetailTax {
  orderDetail   OrderDetail @relation(fields: [orderDetailId], references: [id])
  orderDetailId Int
  unitAmount    Decimal     @default(0.000000) @db.Decimal(16, 6)
  totalAmount   Decimal     @default(0.000000) @db.Decimal(16, 6)

  @@id([orderDetailId])
  @@index([orderDetailId])
}

model OrderPayment {
  id                  Int                   @id @default(autoincrement())
  orderReference      String?               @db.VarChar(9)
  order               Order?                @relation(fields: [orderReference], references: [reference])
  currency            Currency              @relation(fields: [currencyId], references: [id])
  currencyId          Int
  amount              Decimal               @db.Decimal(10, 2)
  paymentMethod       String                @db.VarChar(255)
  transactionId       String?               @db.VarChar(254)
  createdAt           DateTime              @default(now())
  orderInvoicePayment OrderInvoicePayment[]

  @@index([orderReference])
}

model OrderPayPal {
  id            Int      @id @default(autoincrement())
  cart          Cart     @relation(fields: [cartId], references: [id])
  cartId        Int      @unique
  order         Order    @relation(fields: [orderId], references: [id])
  orderId       Int      @unique
  totalPaid     Decimal  @default(0.000000) @db.Decimal(16, 6)
  taxRate       Decimal  @db.Decimal(16, 6)
  fee           Decimal  @db.Decimal(16, 6)
  grossAmount   Decimal? @db.Decimal(16, 6)
  realFee       Decimal? @db.Decimal(16, 6)
  netAmount     Decimal? @db.Decimal(16, 6)
  transactionId String
  payerId       String
}

// Devolucions de mercaderies
model OrderReturn {
  id                  Int                 @id @default(autoincrement())
  customer            Customer            @relation(fields: [customerId], references: [id])
  customerId          Int
  order               Order               @relation(fields: [orderId], references: [id])
  orderId             Int
  orderReturnStatus   OrderReturnStatus   @relation(fields: [orderReturnStatusId], references: [id])
  orderReturnStatusId Int
  question            String              @db.Text
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  orderReturnDetail   OrderReturnDetail[]

  @@index([orderId])
  @@index([customerId])
}

model OrderReturnDetail {
  orderReturn     OrderReturn @relation(fields: [orderReturnId], references: [id])
  orderReturnId   Int
  orderDetail     OrderDetail @relation(fields: [orderDetailId], references: [id])
  orderDetailId   Int
  productQuantity Int         @default(0)

  @@id([orderReturnId, orderDetailId])
}

model OrderReturnStatus {
  id          Int                     @id @default(autoincrement())
  color       String?                 @db.VarChar(32)
  lang        OrderReturnStatusLang[]
  orderReturn OrderReturn[]
}

model OrderReturnStatusLang {
  orderReturnStatus   OrderReturnStatus @relation(fields: [orderReturnStatusId], references: [id])
  orderReturnStatusId Int
  lang                Lang              @relation(fields: [langId], references: [id])
  langId              Int
  name                String            @db.VarChar(64)

  @@id([orderReturnStatusId, langId])
}

model OrderSlip {
  id                   Int               @id @default(autoincrement())
  customer             Customer          @relation(fields: [customerId], references: [id])
  customerId           Int
  order                Order             @relation(fields: [orderId], references: [id])
  orderId              Int
  totalProductsTaxExcl Decimal           @default(0.000000) @db.Decimal(20, 6)
  totalProductsTaxIncl Decimal           @default(0.000000) @db.Decimal(20, 6)
  totalShippingTaxExcl Decimal           @default(0.000000) @db.Decimal(20, 6)
  totalShippingTaxIncl Decimal           @default(0.000000) @db.Decimal(20, 6)
  freeShipping         Boolean           @default(false)
  shippingCostAmount   Decimal           @db.Decimal(10, 2)
  amount               Decimal           @db.Decimal(10, 2)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  type                 OrderSlipType
  detail               OrderSlipDetail[]

  @@index([orderId])
  @@index([customerId])
}

enum OrderSlipType {
  // Based on product prices
  productPrices
  // Based on product prices, but do not refund the voucher amount
  excludeVoucher
  // Refund amount manually specified
  specificAmount
}

model OrderSlipDetail {
  orderSlip         OrderSlip   @relation(fields: [orderSlipId], references: [id])
  orderSlipId       Int
  orderDetail       OrderDetail @relation(fields: [orderDetailId], references: [id])
  orderDetailId     Int
  productQuantity   Int         @default(0)
  unitPriceTaxExcl  Decimal     @default(0.000000) @db.Decimal(20, 6)
  unitPriceTaxIncl  Decimal     @default(0.000000) @db.Decimal(20, 6)
  totalPriceTaxExcl Decimal     @default(0.000000) @db.Decimal(20, 6)
  totalPriceTaxIncl Decimal     @default(0.000000) @db.Decimal(20, 6)
  amountTaxExcl     Decimal     @default(0.000000) @db.Decimal(10, 2)
  amountTaxIncl     Decimal     @default(0.000000) @db.Decimal(10, 2)

  @@id([orderSlipId, orderDetailId])
}

model OrderHistory {
  id            Int         @id @default(autoincrement())
  employee      Employee?   @relation(fields: [employeeId], references: [id])
  employeeId    Int?
  order         Order       @relation(fields: [orderId], references: [id])
  orderId       Int
  orderStatus   OrderStatus @relation(fields: [orderStatusId], references: [id])
  orderStatusId Int
  createdAt     DateTime    @default(now())
}

//
// review.prisma
//

model Reviewer {
  id             String          @id @unique
  name           String
  customer       Customer?       @relation(fields: [customerId], references: [id])
  customerId     Int?            @unique
  productReviews ProductReview[]
  serviceReviews ServiceReview[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model ProductReview {
  id          String   @id @unique
  stars       Int
  content     String
  attachments String[]
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     Int
  reviewer    Reviewer @relation(fields: [reviewerId], references: [id])
  reviewerId  String
  lang        Lang     @relation(fields: [langId], references: [id])
  langId      Int
  createdAt   DateTime
  updatedAt   DateTime
}

model ServiceReview {
  id         String    @id @unique
  stars      Int
  title      String
  content    String
  reply      String?
  repliedAt  DateTime?
  featured   Boolean   @default(false)
  order      Order?    @relation(fields: [orderId], references: [id])
  orderId    Int?
  reviewer   Reviewer  @relation(fields: [reviewerId], references: [id])
  reviewerId String
  lang       Lang      @relation(fields: [langId], references: [id])
  langId     Int
  createdAt  DateTime
  updatedAt  DateTime
}

//
// schedule.prisma
//

model ScheduleControl {
  id         Int            @id @default(autoincrement())
  status     ScheduleStatus
  schedule   Schedule       @relation(fields: [scheduleId], references: [id])
  scheduleId String
  meta       Json?
  startedAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  finishedAt DateTime?
}

model Schedule {
  id          String            @id @unique
  displayName String
  image       String
  cron        String
  verboseCron String
  active      Boolean           @default(false)
  controls    ScheduleControl[]
}

enum ScheduleStatus {
  waiting
  running
  completed
  skipped
  failed
  cancelled
}

//
// ui.prisma
//

model Menu {
  id        Int        @id @default(autoincrement())
  name      String
  active    Boolean    @default(false)
  items     MenuItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model MenuItem {
  id           Int            @id @default(autoincrement())
  menu         Menu           @relation(fields: [menuId], references: [id])
  menuId       Int
  category     Category?      @relation(fields: [categoryId], references: [id])
  categoryId   Int?
  isCustomLink Boolean        @default(false)
  position     Int
  active       Boolean        @default(true)
  lang         MenuItemLang[]

  @@unique([menuId, position])
}

model MenuItemLang {
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId Int
  lang       Lang     @relation(fields: [langId], references: [id])
  langId     Int
  name       String
  url        String

  @@id([menuItemId, langId])
}
